% Initial State, dynamic definitions
:- dynamic(closed/1).
:- dynamic(opened/1).
:- dynamic(cl/1).
:- dynamic(in/2).
:- dynamic(not_hungry/0).
:- dynamic(has/1).
:- dynamic(baked/1).

closed(ref).
closed(mo).
cl(mo).
in(book, ref).
in(pizza, ref).
in(chicken, ref).

% Actions
open(X) :- closed(X), assert(opened(X)), retract(closed(X)), !.
h_close(X) :- opened(X), assert(closed(X)), retract(opened(X)), !.
take(X, From) :- cl(From), opened(From), in(X, From), assert(has(X)),
  retract(in(X, From)), !.
putIn(C,In) :- cl(In), has(C), opened(In), assert(in(C,In)), retract(has(C)), !.
bake(X) :- has(X), closed(mo), assert(baked(X)), retract(has(X)), !.
eat(X) :- not(not_hungry), baked(X), opened(mo), assert(not_hungry), retract(opened(mo)), !.
move(To) :- assert(cl(To)), !.

% Action definitions for "eat" planning scenario

% Action: open(X).
can(open(X),[cl(X),closed(X)]):-appliance(X).
add(open(X),[opened(X)]). % Facts that become true after executing the Action.
del(open(X),[closed(X)]). % Facts the become false after executing the Action.

% Action: close(X).
can(close(X),[cl(X),opened(X)]):-appliance(X).
add(close(X),[closed(X)]). % Facts that become true after executing the Action.
del(close(X),[opened(X)]). % Facts the become false after executing the Action.

% Action: take(X, From).
can(take(X,From),[cl(From),opened(From),in(X, From)]):-appliance(From).
add(take(X,From),[has(X), closed(From)]). % Facts that become true after executing the Action.
del(take(X,From),[in(X,From), opened(From)]). % Facts the become false after executing the Action.


% Action: put(C,In).
can(put(C,In),[cl(In),has(C),opened(In)]):-appliance(In).
add(put(C,In),[in(C,In)]). % Facts that become true after executing the Action.
del(put(C,In),[has(C)]). % Facts the become false after executing the Action.

% Action: bake(X).
can(bake(X),[cl(mo),has(X),closed(mo)]):-appliance(From), food(X).
add(bake(X),[baked(X), in(X, mo)]). % Facts that become true after executing the Action.
del(bake(X),[has(X)]). % Facts the become false after executing the Action.

% Action: eat(X).
can(eat(X),[has(X), baked(X)]) :- food(X).
add(eat(X),[not_hungry]). % Facts that become true after executing the Action.
del(eat(X),[has(X)]).

%% Action: move(To).
can(move(To),[cl(X)]):-appliance(To).
add(move(To),[cl(To)]). % Facts that become true after executing the Action.
del(move(To),[cl(X)]). % Facts the become false after executing the Action.

appliance(mo).
appliance(ref).
food(chicken).
food(pizza).

:- include('planner').

% Test
% Run the test: plan([closed(ref), closed(mo), cl(mo),in(book,ref), in(pizza, ref), in(chicken,ref)],[not_hungry],Plan,X).

:- write("RUN -- plan([closed(ref), closed(mo), cl(mo), in(book, ref), in(pizza, ref), in(chicken, ref)], [not_hungry], Plan, X) -- TO GET A PLAN").
