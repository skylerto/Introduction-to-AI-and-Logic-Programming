% Initial State, dynamic definitions
:- dynamic(closed/1).
:- dynamic(opened/1).
:- dynamic(cl/1).
:- dynamic(in/2).
:- dynamic(not_hungry/0).
:- dynamic(has/1).
:- dynamic(baked/1).

closed(ref).
closed(mo).
cl(mo).
in(book, ref).
in(chicken, ref).
in(pizza, ref).

% Actions
open(X) :- assert(opened(X)), retract(closed(X)).
h_close(X) :- assert(closed(X)), retract(opened(X)).
take(X, From) :- has(X), not(in(X, From)).
putIn(C,In) :- not(has(C)), assert(in(C,In)).
bake(X) :- assert(baked(X)).
eat(X) :- assert(not_hungry).
move(To) :- assert(cl(To)).

% Action definitions for "eat" planning scenario

can(open(X),[cl(X),?]):-appliance(X).
add(open(X),?).
del(open(X),[?]).

can(close(X),[?,?]):-appliance(X).
add(close(X),[closed(X)]).  
del(close(X),?).  

can(take(X,From),[cl(From),opened(From),?]):-appliance(From).
add(take(X,From),[?]).  
del(take(X,From),?).

can(put(C,In),[?,?,?]):-appliance(In).
add(put(C,In),[in(C,In)]).  
del(put(C,In),[?]).

can(bake(X),[cl(?),?,closed(mo)]):-appliance(From), food(X).
add(bake(X),?).  
del(bake(X),?).

can(eat(X),[?,baked(X)]).
add(eat(X),[?]).  
del(eat(X),?). 

can(move(To),[cl(X)]):-appliance(To).
add(move(To),[cl(To)]).  
del(move(To),[?]). 

appliance(mo).
appliance(ref).
food(chicken).
food(pizza).
